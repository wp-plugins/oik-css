<?php
/*
Plugin Name: oik-css
Plugin URI: http://wordpress.org/extend/plugins/oik-css
Plugin URI: http://www.oik-plugins.com/oik-plugins/oik-css
Description: Implements [bw_css] shortcode for internal CSS styling and to help document CSS examples and [bw_geshi] for other languages
Version: 0.4  
Author: bobbingwide
Author URI: http://www.bobbingwide.com
License: GPL2

    Copyright 2013,2014 Bobbing Wide (email : herb@bobbingwide.com )

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2,
    as published by the Free Software Foundation.

    You may NOT assume that you can use any other version of the GPL.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    The license for this software can likely be found here:
    http://www.gnu.org/licenses/gpl-2.0.html

*/

/**
 * Implement "oik_loaded" action for oik-css
 */
function oik_css_init() {
  bw_add_shortcode( "bw_css", "oik_css", oik_path( "shortcodes/oik-css.php", "oik-css" ), false );
  bw_add_shortcode( "bw_geshi", "oik_geshi", oik_path( "shortcodes/oik-geshi.php", "oik-css" ), false );
  bw_better_autop();
}

/**
 * Implement an intermediate trace filter to monitor what's happening with "the_content"
 */
function bw_tracef( $arg1, $arg2=null, $arg3=null ) {
  return( bw_trace2( $arg1 ) );
}

/**
 * Implement "no_texturize_shortcodes" for oik-css shortcodes
 * @param array $shortcodes - array of shortcodes that won't be texturized
 * @return array $shortcodes - updated array with our shortcodes added
 */
function bw_no_texturize_shortcodes( $shortcodes ) {
  $shortcodes[] = "bw_css";
  $shortcodes[] = "bw_geshi"; 
  return( $shortcodes );
}

/**
 * Implement 'the_content' filter using wpautop() without converting newlines to br tags
 * @param string $pee - the content with new lines to be converted to paragraphs
 * @return string - the content with automatically generated paragraphs
 */
function bw_wpautop( $pee ) {
  return( wpautop( $pee, false ) ); 
}    
 
/**
 * Improve wpautop and shortcode_unautop processing
 * 
 * The purpose of this function is to defer wpautop filter processing until AFTER shortcodes are expanded 
 * 
 * By default the wpautop() filter is called at priority 10
 * and shortcode_unautop() is also called at priority 10 (see wp-include/default-filters.php )
 *
 * do_shortcode() is called at priority 11  ( see wp-includes/shortcodes.php )
 *
 * In certain circumstances wpautop() can really mess up the HTML that's generated by shortcodes
 * such as [bw_css] since it will convert new line characters to &lt;br /&gt; tags
 * 
 * I applied the suggestion from 
 * @link http://stackoverflow.com/questions/5940854/disable-automatic-formatting-inside-wordpress-shortcodes
 * but that caused WooCommerce's [add_to_cart] shortcode to fail since it created new line characters
 * during the expansion which were then converted to unwanted paragraph end and start tags.
 * 
 * I tried moving shortcode_unautop as well but that didn't help.
 *
 * A pragmatic solution for [add_to_cart] was to alter the WooCommerce code so that it doesn't create unnecessary new lines.
 * That worked BUT the wpautop() processing still had problems with textarea tags with embedded new line characters.
 *
 * So the latest solution ( 2013/09/03) is to disable both wpautop() and shortcode_unautop().
 * and replace wpautop() by bw_wpautop() where newlines are NOT converted to breaks, performed AFTER shortcode expansion.
 *
 */
function bw_better_autop() {
  remove_filter( 'the_content', 'wpautop' );
  remove_filter( 'the_content', 'shortcode_unautop' );
  //add_filter( 'the_content', 'bw_tracef', 99 );
  add_filter( 'the_content', 'bw_wpautop' , 99);
  //add_filter( 'the_content', 'bw_tracef', 100 );
  //add_filter( 'the_content', 'shortcode_unautop',100 );
  //add_filter( 'no_texturize_shortcodes', "bw_no_texturize_shortcodes" );
}  

/**
 * Set the plugin server. Not necessary for a plugin on WordPress.org
 */
// function oik_css_admin_menu() {
//  oik_register_plugin_server( __FILE__ );
//}

/**
 * Implement "admin_notices" for oik-css to check plugin dependency
 */ 
function oik_css_activation() {
  static $plugin_basename = null;
  if ( !$plugin_basename ) {
    $plugin_basename = plugin_basename(__FILE__);
    add_action( "after_plugin_row_" . $plugin_basename, __FUNCTION__ );   
    require_once( "admin/oik-activation.php" );
  }  
  $depends = "oik:2.0";
  oik_plugin_lazy_activation( __FILE__, $depends, "oik_plugin_plugin_inactive" );
}

/**
 * Function to run when the plugin file is loaded 
 */
function oik_css_plugin_loaded() {
  add_action( "admin_notices", "oik_css_activation" );
  //add_action( "oik_admin_menu", "oik_css_admin_menu" );
  add_action( "oik_loaded", "oik_css_init" );
}

oik_css_plugin_loaded();
